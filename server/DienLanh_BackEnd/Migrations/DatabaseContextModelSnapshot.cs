// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPI_JWT_NET6_Base.Models;

#nullable disable

namespace DienLanh_BackEnd.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DienLanh_BackEnd.Models.Blog", b =>
                {
                    b.Property<string>("BlogID")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("BlogID");

                    b.Property<DateTime?>("CreatedDate")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedDate")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.HasKey("BlogID");

                    b.ToTable("Blog", (string)null);
                });

            modelBuilder.Entity("DienLanh_BackEnd.Models.Booking", b =>
                {
                    b.Property<string>("BookingID")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("BookingID");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.Property<DateTime?>("UpdatedDate")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BookingID");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("DienLanh_BackEnd.Models.FileDetail", b =>
                {
                    b.Property<string>("FileID")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("FileID");

                    b.Property<DateTime?>("CreatedDate")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasMaxLength(40000)
                        .IsUnicode(true)
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedDate")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.HasKey("FileID");

                    b.ToTable("FileDetail", (string)null);
                });

            modelBuilder.Entity("DienLanh_BackEnd.Models.Product", b =>
                {
                    b.Property<string>("ProductID")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ProductID");

                    b.Property<DateTime?>("CreatedDate")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Price")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("ProductCategoryID")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedDate")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.HasKey("ProductID");

                    b.HasIndex("ProductCategoryID");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("DienLanh_BackEnd.Models.ProductCategory", b =>
                {
                    b.Property<string>("ProductCategoryID")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ProductCategoryID");

                    b.Property<DateTime?>("CreatedDate")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedDate")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.HasKey("ProductCategoryID");

                    b.ToTable("ProductCategory", (string)null);
                });

            modelBuilder.Entity("DienLanh_BackEnd.Models.Service", b =>
                {
                    b.Property<string>("ServiceID")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ServiceID");

                    b.Property<string>("BookingID")
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Price")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ServiceCategoryBlogID")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedDate")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.HasKey("ServiceID");

                    b.HasIndex("BookingID");

                    b.HasIndex("ServiceCategoryBlogID");

                    b.ToTable("Service", (string)null);

                    b.HasData(
                        new
                        {
                            ServiceID = "2256876019",
                            CreatedDate = new DateTime(2023, 7, 31, 15, 7, 37, 380, DateTimeKind.Local).AddTicks(6672),
                            Title = "Tháo, lắp máy lạnh",
                            UpdatedDate = new DateTime(2023, 7, 31, 15, 7, 37, 380, DateTimeKind.Local).AddTicks(6711)
                        },
                        new
                        {
                            ServiceID = "3589386588",
                            CreatedDate = new DateTime(2023, 7, 31, 15, 7, 37, 380, DateTimeKind.Local).AddTicks(6747),
                            Title = "Tháo, lắp máy giặt",
                            UpdatedDate = new DateTime(2023, 7, 31, 15, 7, 37, 380, DateTimeKind.Local).AddTicks(6750)
                        },
                        new
                        {
                            ServiceID = "1937088546",
                            CreatedDate = new DateTime(2023, 7, 31, 15, 7, 37, 380, DateTimeKind.Local).AddTicks(6766),
                            Title = "Tháo, lắp máy nước nóng",
                            UpdatedDate = new DateTime(2023, 7, 31, 15, 7, 37, 380, DateTimeKind.Local).AddTicks(6767)
                        },
                        new
                        {
                            ServiceID = "6826524702",
                            CreatedDate = new DateTime(2023, 7, 31, 15, 7, 37, 380, DateTimeKind.Local).AddTicks(6821),
                            Title = "Tháo lắp vận chuyển tủ lạnh",
                            UpdatedDate = new DateTime(2023, 7, 31, 15, 7, 37, 380, DateTimeKind.Local).AddTicks(6822)
                        },
                        new
                        {
                            ServiceID = "3239775638",
                            CreatedDate = new DateTime(2023, 7, 31, 15, 7, 37, 380, DateTimeKind.Local).AddTicks(6834),
                            Title = "Vệ sinh máy lạnh",
                            UpdatedDate = new DateTime(2023, 7, 31, 15, 7, 37, 380, DateTimeKind.Local).AddTicks(6835)
                        },
                        new
                        {
                            ServiceID = "7772096437",
                            CreatedDate = new DateTime(2023, 7, 31, 15, 7, 37, 380, DateTimeKind.Local).AddTicks(6848),
                            Title = "Vệ sinh máy giặt",
                            UpdatedDate = new DateTime(2023, 7, 31, 15, 7, 37, 380, DateTimeKind.Local).AddTicks(6849)
                        },
                        new
                        {
                            ServiceID = "7266490221",
                            CreatedDate = new DateTime(2023, 7, 31, 15, 7, 37, 380, DateTimeKind.Local).AddTicks(6861),
                            Title = "Sửa chữa máy lạnh",
                            UpdatedDate = new DateTime(2023, 7, 31, 15, 7, 37, 380, DateTimeKind.Local).AddTicks(6862)
                        },
                        new
                        {
                            ServiceID = "7578872125",
                            CreatedDate = new DateTime(2023, 7, 31, 15, 7, 37, 380, DateTimeKind.Local).AddTicks(6892),
                            Title = "Sửa chữa máy giặt",
                            UpdatedDate = new DateTime(2023, 7, 31, 15, 7, 37, 380, DateTimeKind.Local).AddTicks(6893)
                        },
                        new
                        {
                            ServiceID = "9637057639",
                            CreatedDate = new DateTime(2023, 7, 31, 15, 7, 37, 380, DateTimeKind.Local).AddTicks(6906),
                            Title = "Sửa chữa tủ lạnh",
                            UpdatedDate = new DateTime(2023, 7, 31, 15, 7, 37, 380, DateTimeKind.Local).AddTicks(6907)
                        });
                });

            modelBuilder.Entity("WebAPI_JWT_NET6_Base.Models.UserInfo", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("UserId");

                    b.Property<DateTime?>("CreatedDate")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(60)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UserName")
                        .HasMaxLength(30)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("UserId");

                    b.ToTable("UserInfo", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "9732800313",
                            CreatedDate = new DateTime(2023, 7, 31, 15, 7, 37, 379, DateTimeKind.Local).AddTicks(6367),
                            DisplayName = "Lê Văn Hiếu",
                            Email = "admin@gmail.com",
                            Password = "admin",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("DienLanh_BackEnd.Models.Product", b =>
                {
                    b.HasOne("DienLanh_BackEnd.Models.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryID");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("DienLanh_BackEnd.Models.Service", b =>
                {
                    b.HasOne("DienLanh_BackEnd.Models.Booking", null)
                        .WithMany("Service")
                        .HasForeignKey("BookingID");

                    b.HasOne("DienLanh_BackEnd.Models.Blog", "ServiceCategory")
                        .WithMany()
                        .HasForeignKey("ServiceCategoryBlogID");

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("DienLanh_BackEnd.Models.Booking", b =>
                {
                    b.Navigation("Service");
                });

            modelBuilder.Entity("DienLanh_BackEnd.Models.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
